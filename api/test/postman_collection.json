{
	"info": {
		"_postman_id": "10ef32bd-ec2c-4147-8806-57f818832b95",
		"name": "MapNotes API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Mapnotes",
			"item": [
				{
					"name": "/notes return list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68fc5c46-582e-4a20-bc00-7627bdea3a04",
								"exec": [
									"pm.test(\"Status code is 200\", () => { ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// pm.test(\"test empty body\", () => {",
									"//     pm.expect(pm.response.json()).to.eql([]);",
									"// });",
									"",
									"pm.test(\"test body is a list\", () => {",
									"    pm.expect(pm.response.json().length).to.be.within(0,10000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/notes",
							"host": [
								"{{url}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "check for empty Mapnotes list"
					},
					"response": []
				},
				{
					"name": "/notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e426336d-87a6-4daf-be84-d9ea5a3cbc6d",
								"exec": [
									"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
									"",
									"const response = pm.response.json();",
									"",
									"postman.setEnvironmentVariable(\"noteId\", response.id);",
									"",
									"pm.test(\"test id is number\", () => {",
									"    pm.expect(response.id).to.be.a('number');",
									"});",
									"pm.test(\"test title\", () => {",
									"    pm.expect(response.title).to.eql(\"Postman Test\");",
									"});",
									"pm.test(\"test body\", () => {",
									"    pm.expect(response.body).to.eql(\"Postman test body text\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Postman Test\",\n    \"body\": \"Postman test body text\"\n}"
						},
						"url": {
							"raw": "{{url}}/notes",
							"host": [
								"{{url}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "check for empty Mapnotes list"
					},
					"response": []
				},
				{
					"name": "/notes return non-empty list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7af17a65-4c0f-41be-9ae9-b023e38456a3",
								"exec": [
									"pm.test(\"Status code is 200\", () => { ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"test body has at least on note\", () => {",
									"    pm.expect(pm.response.json().length).to.be.within(1,10000);",
									"});",
									"",
									"const note = pm.response.json()[0];",
									"",
									"pm.test(\"test id is Number\", () => {",
									"    pm.expect(note.id).to.be.a('number')",
									"});",
									"pm.test(\"test title\", () => {",
									"    pm.expect(note.title).to.eql(\"Postman Test\");",
									"});",
									"pm.test(\"test body\", () => {",
									"    pm.expect(note.body).to.eql(\"Postman test body text\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/notes",
							"host": [
								"{{url}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "check for empty Mapnotes list"
					},
					"response": []
				},
				{
					"name": "/notes return one note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "031b69ab-e10f-4569-81a2-d34f738487a5",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"const note = pm.response.json();",
									"",
									"pm.test(\"test id is Number\", () => {",
									"    pm.expect(note.id).to.be.a('number')",
									"});",
									"pm.test(\"test title\", () => {",
									"    pm.expect(note.title).to.eql(\"Postman Test\");",
									"});",
									"pm.test(\"test body\", () => {",
									"    pm.expect(note.body).to.eql(\"Postman test body text\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/notes/{{noteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						},
						"description": "check for empty Mapnotes list"
					},
					"response": []
				},
				{
					"name": "/notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53663857-823c-4eb2-8096-a6b2a8302867",
								"exec": [
									"pm.test(\"Status code is 204\", () => { ",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/notes/{{noteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						},
						"description": "check for empty Mapnotes list"
					},
					"response": []
				},
				{
					"name": "/notes return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "556fc83f-39e2-4fbd-9bd6-8e989a763d73",
								"exec": [
									"pm.test(\"Delete non-existent note: Status code is 404\", () => { ",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/notes/{{noteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						},
						"description": "check for empty Mapnotes list"
					},
					"response": []
				},
				{
					"name": "/notes empty title",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88a44b53-fd18-4f86-b6ac-09f65999476d",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"\",\n    \"body\": \"Postman test body text\"\n}"
						},
						"url": {
							"raw": "{{url}}/notes",
							"host": [
								"{{url}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "check for empty Mapnotes list"
					},
					"response": []
				}
			],
			"description": "Tests for the Mapnotes text api",
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}